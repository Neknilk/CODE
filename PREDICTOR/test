import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import r2_score
import joblib
import numpy as np

# Set the directory path
directory_path = r'C:\Users\jayva\Documents\GitHub\FOE\DATA\FILTERED\\'

# Assuming your CSV files are named flight1.csv, flight2.csv, etc.
num_files = 106  # Replace with the actual number of files

flights = []
for i in range(1, num_files + 1):
    filename = os.path.join(directory_path, f'flight{i}_smoothed_and_replaced.csv')
    df = pd.read_csv(filename)
    flights.append(df)

# Handle missing values
for i, flight in enumerate(flights):
    flights[i] = flight.dropna()

# Assuming latitude and longitude are the dependent variables
dependent_vars = ['latitude', 'longitude', 'altitude', 'numeric_timestamp']

# Assuming groundspeed, track, altitude, and vertical rate are the independent variables
independent_vars = ['longitude', 'latitude', 'ground_speed', 'track', 'altitude', 'vertical_rate']

# Combine features for each flight
X = [flight[independent_vars] for flight in flights]
y = [flight[dependent_vars] for flight in flights]

# Create lists to store MSE and R-squared values for each flight
mse_scores = []
r2_scores = []

# Train and evaluate the model for each flight
for i in range(num_files):
    model = LinearRegression()

    # Use the entire dataset for training
    model.fit(X[i], y[i])

    # Provide feature names to the model
    model.feature_names_in_ = independent_vars

    # Save the trained model to a file
    model_filename = os.path.join(directory_path, f'model_flight{i + 1}.joblib')
    joblib.dump(model, model_filename)

    # Convert DataFrame to array for predictions
    X_array = X[i].values

    # Make predictions on the entire dataset
    predictions = model.predict(X_array)

    mse = metrics.mean_squared_error(y[i], predictions)
    r2 = r2_score(y[i], predictions)

    print(f"Flight {i + 1} Mean Squared Error: {mse}")
    print(f"Flight {i + 1} R-squared: {r2}")

    # Append the MSE and R-squared values to the lists
    mse_scores.append(mse)
    r2_scores.append(r2)

# Calculate the average MSE and R-squared values across all flights
average_mse = sum(mse_scores) / num_files
average_r2 = sum(r2_scores) / num_files

print(f"Average Mean Squared Error across all flights: {average_mse}")
print(f"Average R-squared across all flights: {average_r2}")