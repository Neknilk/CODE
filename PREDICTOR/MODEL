import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Specify the directory containing your CSV files
data_directory = r'C:\Users\jayva\Documents\GitHub\FOE\DATA\FILTERED\\'

# Initialize lists to store results from each flight
all_predictions = []
all_true_values = []

# Iterate through each CSV file in the directory
for filename in os.listdir(data_directory):
    if filename.endswith('.csv'):
        file_path = os.path.join(data_directory, filename)

        # Read data from the current CSV file with low_memory set to False
        df = pd.read_csv(file_path, low_memory=False)

        # Drop rows with NaN values in both X and y
        df.dropna(subset=['latitude', 'longitude', 'altitude', 'timestamp'], inplace=True)
        X = df[['latitude', 'longitude', 'altitude', 'timestamp']]
        y = df[['latitude', 'longitude', 'altitude', 'timestamp']].shift(-10)

        # Drop rows with NaN values in y after the shift operation
        data = pd.concat([X, y], axis=1).dropna()
        X = data[['latitude', 'longitude', 'altitude', 'timestamp']]
        y = data[['latitude', 'longitude', 'altitude', 'timestamp']].shift(-10)

        # Drop rows with NaN values in X_train and y_train
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        X_train.dropna(inplace=True)
        y_train.dropna(inplace=True)

        # Train a linear regression model
        model = LinearRegression()
        model.fit(X_train, y_train)

        # Make predictions on the test set
        predictions = model.predict(X_test)

        # Store results for evaluation
        all_predictions.extend(predictions)
        all_true_values.extend(y_test.values)

        # Example: Predict trajectory 10 minutes ahead for the last data point in the flight
        new_data_point = df.tail(1)[['latitude', 'longitude', 'altitude', 'timestamp']].fillna(0).values
        predicted_trajectory = model.predict(new_data_point)
        print(f"Predicted Trajectory 10 Minutes Ahead for {filename}: {predicted_trajectory}")

# Check if there are samples for evaluation
if len(all_true_values) > 0 and len(all_predictions) > 0:
    # Evaluate the overall model performance
    mse = mean_squared_error(all_true_values, all_predictions)
    print(f"Overall Mean Squared Error: {mse}")
else:
    print("No samples available for evaluation.")
